// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: coordination_service.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZongziClient is the client API for Zongzi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZongziClient interface {
	// Probe returns Gossip.AdvertiseAddress
	// Used by new hosts to start dragonboat
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
	// Info returns prime replicaID and hostID
	// Used by new hosts to discover prime shard replicas
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Members returns json marshaled map of member prime replicaID to hostID
	// Used by new hosts joining a bootstrapped prime shard
	Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
	// Join takes a replica ID and host ID and returns success
	// Used by joining hosts to request their own addition to the prime shard
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Propose provides unary request/response command forwarding
	Propose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Query provides unary request/response query forwarding
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type zongziClient struct {
	cc grpc.ClientConnInterface
}

func NewZongziClient(cc grpc.ClientConnInterface) ZongziClient {
	return &zongziClient{cc}
}

func (c *zongziClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, "/Zongzi/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zongziClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/Zongzi/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zongziClient) Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, "/Zongzi/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zongziClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/Zongzi/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zongziClient) Propose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Zongzi/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zongziClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Zongzi/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZongziServer is the server API for Zongzi service.
// All implementations must embed UnimplementedZongziServer
// for forward compatibility
type ZongziServer interface {
	// Probe returns Gossip.AdvertiseAddress
	// Used by new hosts to start dragonboat
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
	// Info returns prime replicaID and hostID
	// Used by new hosts to discover prime shard replicas
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Members returns json marshaled map of member prime replicaID to hostID
	// Used by new hosts joining a bootstrapped prime shard
	Members(context.Context, *MembersRequest) (*MembersResponse, error)
	// Join takes a replica ID and host ID and returns success
	// Used by joining hosts to request their own addition to the prime shard
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Propose provides unary request/response command forwarding
	Propose(context.Context, *Request) (*Response, error)
	// Query provides unary request/response query forwarding
	Query(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedZongziServer()
}

// UnimplementedZongziServer must be embedded to have forward compatible implementations.
type UnimplementedZongziServer struct {
}

func (UnimplementedZongziServer) Probe(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}
func (UnimplementedZongziServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedZongziServer) Members(context.Context, *MembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedZongziServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedZongziServer) Propose(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedZongziServer) Query(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedZongziServer) mustEmbedUnimplementedZongziServer() {}

// UnsafeZongziServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZongziServer will
// result in compilation errors.
type UnsafeZongziServer interface {
	mustEmbedUnimplementedZongziServer()
}

func RegisterZongziServer(s grpc.ServiceRegistrar, srv ZongziServer) {
	s.RegisterService(&Zongzi_ServiceDesc, srv)
}

func _Zongzi_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZongziServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Zongzi/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZongziServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zongzi_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZongziServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Zongzi/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZongziServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zongzi_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZongziServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Zongzi/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZongziServer).Members(ctx, req.(*MembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zongzi_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZongziServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Zongzi/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZongziServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zongzi_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZongziServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Zongzi/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZongziServer).Propose(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zongzi_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZongziServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Zongzi/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZongziServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Zongzi_ServiceDesc is the grpc.ServiceDesc for Zongzi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zongzi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Zongzi",
	HandlerType: (*ZongziServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Probe",
			Handler:    _Zongzi_Probe_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Zongzi_Info_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Zongzi_Members_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Zongzi_Join_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _Zongzi_Propose_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Zongzi_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordination_service.proto",
}
