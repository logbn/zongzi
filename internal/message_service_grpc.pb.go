// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	// Propose provides unary request/response command forwarding
	Propose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Stream provides streaming proposal forwarding
	Stream(ctx context.Context, opts ...grpc.CallOption) (MessageService_StreamClient, error)
	// Query provides unary request/response query forwarding
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Watch provides streaming query response forwarding
	Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (MessageService_WatchClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Propose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/MessageService/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (MessageService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], "/MessageService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceStreamClient{stream}
	return x, nil
}

type MessageService_StreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type messageServiceStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/MessageService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (MessageService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], "/MessageService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_WatchClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type messageServiceWatchClient struct {
	grpc.ClientStream
}

func (x *messageServiceWatchClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	// Propose provides unary request/response command forwarding
	Propose(context.Context, *Request) (*Response, error)
	// Stream provides streaming proposal forwarding
	Stream(MessageService_StreamServer) error
	// Query provides unary request/response query forwarding
	Query(context.Context, *Request) (*Response, error)
	// Watch provides streaming query response forwarding
	Watch(*Request, MessageService_WatchServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) Propose(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedMessageServiceServer) Stream(MessageService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedMessageServiceServer) Query(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMessageServiceServer) Watch(*Request, MessageService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageService/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Propose(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).Stream(&messageServiceStreamServer{stream})
}

type MessageService_StreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type messageServiceStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).Watch(m, &messageServiceWatchServer{stream})
}

type MessageService_WatchServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type messageServiceWatchServer struct {
	grpc.ServerStream
}

func (x *messageServiceWatchServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _MessageService_Propose_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MessageService_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _MessageService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _MessageService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message_service.proto",
}
