syntax = "proto3";

package zongzi;

option go_package = "github.com/logbn/zongzi/internal";

// Zongzi uses an internal gRPC service for cluster coordination
service Internal {
  // Ping is a noop for timing purposes
  rpc Ping(PingRequest) returns (PingResponse) {}

  // Probe returns Gossip.AdvertiseAddress
  // Used by new hosts to start dragonboat
  rpc Probe(ProbeRequest) returns (ProbeResponse) {}

  // Info returns zero shard replicaID and hostID
  // Used by new hosts to discover zero shard replicas
  rpc Info(InfoRequest) returns (InfoResponse) {}

  // Members returns json marshaled map of member zero shard replicaID to hostID
  // Used by new hosts joining a bootstrapped zero shard
  rpc Members(MembersRequest) returns (MembersResponse) {}

  // Join takes a host ID and returns success
  // Used by joining hosts to request their own addition to the zero shard
  rpc Join(JoinRequest) returns (JoinResponse) {}

  // Add takes a replica ID, shard ID and host ID and returns success
  // Used during replica creation to request replica's addition to the shard
  rpc Add(AddRequest) returns (AddResponse) {}

  // Index reads the index of a shard
  rpc Index(IndexRequest) returns (IndexResponse) {}

  // Apply provides unary request/response command forwarding
  rpc Apply(ApplyRequest) returns (ApplyResponse) {}

  // Commit provides unary request/response command forwarding
  rpc Commit(CommitRequest) returns (CommitResponse) {}

  // Read provides unary request/response query forwarding
  rpc Read(ReadRequest) returns (ReadResponse) {}

  // Stream provides streaming query response forwarding
  rpc Stream(StreamRequest) returns (stream StreamResponse) {}

  // Watch provides streaming response forwarding for queries and proposals
  rpc Watch(stream WatchRequest) returns (stream WatchResponse) {}
}

message PingRequest {}
message PingResponse {}

message ProbeRequest {}
message ProbeResponse {
  string gossip_advertise_address = 1;
}

message InfoRequest {}
message InfoResponse {
  string host_id = 1;
  uint64 replica_id = 2;
}

message MembersRequest {}
message MembersResponse {
  map<uint64, string> members = 1;
}

message JoinRequest {
  string host_id = 1;
  bool is_non_voting = 2;
}
message JoinResponse {
  uint64 value = 1;
  string error = 2;
}

message AddRequest {
  string host_id = 1;
  uint64 shard_id = 2;
  uint64 replica_id = 3;
  bool is_non_voting = 4;
}
message AddResponse {
  uint64 value = 1;
  string error = 2;
}

message IndexRequest {
  uint64 shard_id = 1;
}
message IndexResponse {}

message ApplyRequest {
  uint64 shard_id = 1;
  bytes data = 2;
}
message ApplyResponse {
  uint64 value = 1;
  bytes data = 2;
}

message CommitRequest {
  uint64 shard_id = 1;
  bytes data = 2;
}
message CommitResponse {}

message ReadRequest {
  uint64 shard_id = 1;
  bool stale = 2;
  bytes data = 3;
}
message ReadResponse {
  uint64 value = 1;
  bytes data = 2;
}

message WatchRequest {
  uint64 shard_id = 1;
  bool stale = 2;
  bytes data = 3;
}
message WatchResponse {
  uint64 value = 1;
  bytes data = 2;
}

message StreamRequest {
  uint64 shard_id = 1;
  bool stale = 2;
  bytes data = 3;
}
message StreamResponse {
  uint64 value = 1;
  bytes data = 2;
}
